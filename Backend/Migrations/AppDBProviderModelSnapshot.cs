// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDBProvider))]
    partial class AppDBProviderModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.M_Event", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EventCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAccountID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            ID = "E-1",
                            End = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventCreated = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDone = false,
                            Notes = "erste Notizen",
                            Start = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "erstes Event",
                            UserAccountID = "U-1"
                        },
                        new
                        {
                            ID = "E-2",
                            End = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventCreated = new DateTime(2025, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDone = false,
                            Notes = "Weitere Notizen zu diesem Event",
                            Start = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "2. Event",
                            UserAccountID = "U-1"
                        });
                });

            modelBuilder.Entity("Backend.Models.M_LoginHistory", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("Login")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("M_UserID")
                        .HasColumnType("text");

                    b.Property<string>("UserAccountID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("M_UserID");

                    b.ToTable("LoginHistories");
                });

            modelBuilder.Entity("Backend.Models.M_User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = "U-1",
                            Name = "Erster Nutzer",
                            Password = "Nutzerpassword"
                        });
                });

            modelBuilder.Entity("Backend.Models.M_Event", b =>
                {
                    b.HasOne("Backend.Models.M_User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.M_LoginHistory", b =>
                {
                    b.HasOne("Backend.Models.M_User", null)
                        .WithMany("LoginHistories")
                        .HasForeignKey("M_UserID");
                });

            modelBuilder.Entity("Backend.Models.M_User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("LoginHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
